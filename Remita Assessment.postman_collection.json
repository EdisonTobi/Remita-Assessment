{
	"info": {
		"_postman_id": "2ef6b802-18f4-4137-be18-5447201fddda",
		"name": "Remita Assessment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19516078",
		"_collection_link": "https://planetary-meadow-304970.postman.co/workspace/846862c3-7c25-46ac-80be-cdf47e8c5210/collection/19516078-2ef6b802-18f4-4137-be18-5447201fddda?action=share&source=collection_link&creator=19516078"
	},
	"item": [
		{
			"name": "listusers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"page\");",
							"    pm.expect(pm.response.text()).to.include(\"per_page\");",
							"    pm.expect(pm.response.text()).to.include(\"total\");",
							"    pm.expect(pm.response.text()).to.include(\"total_pages\");",
							"    pm.expect(pm.response.text()).to.include(\"data\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/api/users",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "singleusers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify resonse data\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.data.id).to.eql(11);",
							"    pm.expect(jsonData.data.email).to.eql(\"george.edwards@reqres.in\");",
							"    pm.expect(jsonData.data.first_name).to.eql(\"George\");",
							"    pm.expect(jsonData.data.last_name).to.eql(\"Edwards\");",
							"",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.test(\"Response time is less than 200ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(200);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/api/users/11",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listresource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the number of items per page\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.per_page).to.eql(6);",
							"    ",
							"    pm.test(\"Verify the total number of items\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.total).to.eql(12);",
							"});",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/unknown",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Singleresource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"  pm.test(\"Verify response fields\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.data).to.have.property(\"id\");",
							"    pm.expect(jsonData.data).to.have.property(\"name\");",
							"    pm.expect(jsonData.data).to.have.property(\"year\");",
							"    pm.expect(jsonData.data).to.have.property(\"color\");",
							"    pm.expect(jsonData.data).to.have.property(\"pantone_value\");",
							"",
							"",
							"      pm.test(\"Response time is less than 200ms\", function () {",
							"          pm.expect(pm.response.responseTime).to.be.below(200);",
							"      });",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/api/unknown/2",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "singleusers notfound",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/api/users/23",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Apiregister",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property('token');",
							"",
							"    pm.test(\"Verify token is a non-empty string\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.token).to.be.a(\"string\");",
							"    pm.expect(jsonData.token).to.not.be.empty;",
							"",
							"",
							"        pm.test(\"Status code is 200\", function () {",
							"            pm.response.to.have.status(200);",
							"        });",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/register",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registerunsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response status code\", function () {",
							"    pm.response.to.have.status([400, 401]);",
							"    pm.test(\"Verify error message indicates invalid email\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.error).to.include(\"email\");",
							"    pm.expect(jsonData.error).to.include(\"invalid\");",
							"",
							"        pm.test(\"Response time is less than 200ms\", function () {",
							"            pm.expect(pm.response.responseTime).to.be.below(200);",
							"        });",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/register",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.test(\"Verify response contains token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"token\");",
							"",
							"    pm.test(\"Verify token is a non-empty string\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.be.a(\"string\");",
							"    pm.expect(jsonData.token).to.not.be.empty;",
							"});",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/login",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Loginunsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response status code\", function () {",
							"    pm.response.to.have.status([400, 401]);",
							"",
							"    pm.test(\"Verify response contains error message\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"error\");",
							"    pm.expect(jsonData.error).to.be.a(\"string\");",
							"    pm.expect(jsonData.error).to.not.be.empty;",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"peter@klaven\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/login",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"",
							"    pm.test(\"Verify response data\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.name).to.equal(\"Edison\");",
							"    pm.expect(jsonData.job).to.equal(\"Bossleader\");",
							"",
							"",
							"        pm.test(\"Response time is less than 900\", function () {",
							"            pm.expect(pm.response.responseTime).to.be.below(900);",
							"        });",
							"    ",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Edison\",\n    \"job\": \"Bossleader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/users",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response status code\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.test(\"Verify response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal(\"morpheus\", \"Incorrect name\");",
							"    pm.expect(jsonData.job).to.equal(\"zion resident\", \"Incorrect job\");",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");",
							"",
							"    pm.test(\"Verify updated fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.equal(pm.request.json().name, \"Incorrect updated name\");",
							"    pm.expect(jsonData.job).to.equal(pm.request.json().job, \"Incorrect updated job\");",
							"});",
							"",
							"",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/users/2",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    pm.test(\"Verify name field is a string\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.name).to.be.a(\"string\");",
							"",
							"    pm.test(\"Verify name field is not empty\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.name).to.not.be.empty;",
							"});",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api/users/2",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_URL",
			"value": "https://reqres.in/\n",
			"type": "string"
		}
	]
}